#summary Quick getting started guide to ADX development.
#labels Phase-Implementation

Table of Contents:
<wiki:toc max_depth="1" />

= Introduction =

This article will guide you through the process of developing add-ons for Accudemia Data Exchange (ADX).

= Details =

== Prerequisites ==

1. You need to have installed a copy of ADX on your computer for testing, or in any other computer where you usually run the software. You can download your copy by logging in Accudemia and selecting Advanced -> Import in the menu. Once you're there, click on the _Download Latest ADX Version_ link in order to download ADX. Follow the steps described in the installation wizard to install it.

2. The ADX development libraries (the SDK) published in this site. Click on the Downloads tab above and download SDK.zip, extract the files.

3. Microsoft Visual Studio 2008 or newer, or the Express version of it. You can also use any other .NET compiler, such as the Mono project compiler.

4. If you want to grab the latest version of the examples, you will also need a Subversion client, such as http://tortoisesvn.net/

== Building your first Data Source ==

The first thing you have to do, is create a new solution in Visual Studio. Click on _File -> New -> Project_ and create a new Class Library project. That's the only one project you are going to need for your custom plug-ins.

Add the required assembly references by right clicking on the project (inside the Solution Explorer), and selecting Add Reference. Browse and select the _AccudemiaDataX.Core.dll_ and _Ninject.dll_ libraries, both included inside the SDK you have downloaded.


Now, you need to add at least 2 classes to your project:

1. The data source class, which provides grabs the data from your own database and,

2. The plug-in loader, who tells ADX which plug-ins should load from the assembly. It's explained in depth later.


Let's begin with the data source class itself, it has to implement the interface AccudemiaDataX.Core.IDataSource. The methods and properties included there must be implemented in order to work. 

The IDataSource interface is well documented and you should have no major problems on implementing it. Make sure to follow the example *SimpleCustomDataSource* to learn how to do it correctly.

There're 2 major methods you have to take care of:

{{{
/// <summary>
/// Gets the entities from the source, ordered as they should be inserted.
/// </summary>
IEnumerable<IAccudemiaEntity> GetEntities();

/// <summary>
/// Gets the mapped entities and properties, it might not be able to handle or use all the
/// available properties in the model.
/// </summary>
IEnumerable<EntityMap> GetMappedEntities();
}}}

The first method (GetEntities) must return all the objects stored in your database that you want to import. It's important to return then in a logical order, so they can be inserted in the internal database without any constraint violation.

For example, to return 2 students, and add them to a Users Group, you have to return the students and the group first, and then the students assignment to the group.

{{{
var group = new PersonsGroup {Name = "At risk students"};
var s1 = new Student
	{
		FirstName = "John",
		MiddleName = "",
		LastName = "Williams",
		PersonNumber = "123123123",
		Active = true
	};
var s2 = new Student
	{
		FirstName = "Albert",
		MiddleName = "",
		LastName = "Johansen",
		PersonNumber = "456456456",
		Active = true
	};

var member1 = new PersonsGroupMember(s1, group);
var member2 = new PersonsGroupMember(s2, group);

// Entities MUST be returned in a logical order to avoid foreign-key constrains errors.
// The same entity can be returned multiple times because the engine will remove duplicates.
yield return s1;
yield return s2;
yield return group;
yield return member1;
yield return member2;
}}}

You can take a look to the other entities in the AccudemiaDataX.Core.Model namespace to import Centers, Tutors, Subject Areas, and much more. Take a look to the classes in [ADXFieldsInformation] to view what can be imported.

The second and last file you will need is the plugin loader. Create a class and make it derive from AccudemiaDataX.Core.Plugin, you only have to override one method called Load, where you can choose which plugins load at start.

The implementation is trivial, as you only have to bind the IDataSource interface to the class you have built.

{{{
public class PluginLoader : Plugin
{
	public override void Load()
	{
		// Add here all the data sources you want.
		Bind<IDataSource>().To<MockDataSource>();
	}
}
}}}

That's all. The only thing you have to do is install the plugin. Once installed, ADX will scan the assembly at start and search for Plugins, then is when the data source will be registered.